@using Thryft.Models
@using Thryft.Services
@inject CartService cartService
@inject NavigationManager Navigation
@inject UserService userService
@inject AuthService authService

@rendermode InteractiveServer

<MudPopoverProvider />

<MudAppBar Class="py-2" Style="z-index: 1300 !important;">
    @* <MudIconButton Color="Color.Tertiary" Icon="@Icons.Material.Filled.Menu" Href="">Filter</MudIconButton> *@
    <MudSpacer />
    <MudText @onclick="NavigateToHome">thryft</MudText>
    <MudSpacer />
    @if (user == null)
    {
        <MudButton Variant="Variant.Text" Color="Color.Tertiary" Href="/login">Login</MudButton>
    }
    else
    {
        <MudText Class="pe-1"><b>Welcome</b> @GetFirstName(user.Name)</MudText>

        <MudBadge Color="Color.Dark" Content="@cartService.CurrentCart.TotalItems" Max="99">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart"
                           Href="/cart"
                           Color="Color.Tertiary" />
        </MudBadge>
        <MudMenu Color="Color.Tertiary" Class="ms-4" Icon="@Icons.Material.Filled.Person" Style="z-index: 15000">
            <MudMenuItem Onclick="NavigateToProfile">Profile</MudMenuItem>
            <MudMenuItem Onclick="NavigateToOrders">Orders</MudMenuItem>
            <MudDivider />
            <MudMenuItem Onclick="HandleLogout">Logout</MudMenuItem>
        </MudMenu>
    }
</MudAppBar>

@code {
    private User user;

    protected override void OnInitialized()
    {
        // Subscribe to cart updates so the badge updates in real-time
        cartService.OnCartUpdated += StateHasChanged;

        // Subscribe to user changes
        userService.OnUserChanged += OnUserChanged;

        // Initialize user after userService is available
        user = userService.currentUser;

        StateHasChanged();
    }

    private void OnUserChanged()
    {
        user = userService.currentUser;
        StateHasChanged();
    }

    private string GetFirstName(string fullName)
    {
        if (string.IsNullOrEmpty(fullName))
            return fullName;

        // Split by space and return only the first part
        return fullName.Split(' ')[0];
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/home");
    }

    private void NavigateToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/profile");
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/orders");
    }

    private async Task HandleLogout()
    {
        await authService.LogoutAsync();
        Navigation.NavigateTo("/login", true);
    }

    public void Dispose()
    {
        // Important: Unsubscribe to prevent memory leaks
        cartService.OnCartUpdated -= StateHasChanged;
        userService.OnUserChanged -= OnUserChanged;
    }
}