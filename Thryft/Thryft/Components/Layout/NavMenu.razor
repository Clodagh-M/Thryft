@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Thryft.Models
@using Thryft.Services
@inject CartService cartService
@inject NavigationManager Navigation
@inject UserService userService
@inject AuthService authService

@rendermode InteractiveServer
<style>
    /* logo */
    .logo-image {
        max-width: 200px;
        width: 100%;
        height: auto;
        object-fit: contain;
        border-radius:50% !important;
    }

    .logo-imagecrop {
        max-width: 120px;
        width: 100%;
        height: auto;
        object-fit: contain;
        border-radius: 20% !important;
    }

</style>

<MudPopoverProvider />

@if (!isInitialized)
{
    <MudAppBar Class="py-2" Style="z-index: 1300 !important;">
        <MudSpacer />
        <MudText>thryft</MudText>
        <MudSpacer />
        <MudProgressCircular Size="MudBlazor.Size.Small" Color="Color.Tertiary" />
    </MudAppBar>
}
else
{
    <AuthorizeView>
        <Authorized>
            <MudAppBar Class="py-2" Style="z-index: 1300 !important;">
                @if (user == null)
                {
                    <MudSpacer />
                    <MudText @onclick="NavigateToHome">thryft</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Text" Color="Color.Tertiary" Href="/login">Login</MudButton>
                }
                else
                {
                    <MudIconButton Color="Color.Tertiary" Icon="@Icons.Material.Filled.Home" Class="ms-12 me-12" OnClick="NavigateToHome"></MudIconButton>
                    <MudSpacer />
                    <MudImage Src="images/logocrop.png" Alt="companylogo" Elevation="25" Class="rounded-lg  ms-12 logo-imagecrop" />
                    
                    <MudSpacer />
                    <MudText Class="pe-1"><b>Welcome</b> @GetFirstName(user.Name)</MudText>

                    <MudBadge Overlap="true" Color="Color.Dark" Content="@cartService.CurrentCart.TotalItems" Max="99">
                        <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart"
                                       Href="/cart"
                                       Color="Color.Tertiary" />
                    </MudBadge>
                    <MudMenu Color="Color.Tertiary" Class="ms-4" Icon="@Icons.Material.Filled.Person" Style="z-index: 15000">
                        <MudMenuItem Onclick="NavigateToProfile">Profile</MudMenuItem>
                        <MudMenuItem Onclick="NavigateToOrders">Orders</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem Onclick="HandleLogout">Logout</MudMenuItem>
                    </MudMenu>
                }
            </MudAppBar>
        </Authorized>
        <NotAuthorized>
            <MudContainer Class="text-center py-16">

                <MudImage Src="images/logo.png" Alt="companylogo" Elevation="25" Class="rounded-lg ma-4 logo-image" />
            
                <MudText Typo="Typo.h4" Class="mb-3">Access Required</MudText>
                <MudText Typo="Typo.body1" Color="Color.Primary" Class="mb-4">
                    Please log in to browse our products.
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="RedirectToLogin"
                           StartIcon="@Icons.Material.Filled.Login">
                    Log In
                </MudButton>
            </MudContainer>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    private User user;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to cart updates so the badge updates in real-time
        cartService.OnCartUpdated += StateHasChanged;

        // Subscribe to user changes
        userService.OnUserChanged += OnUserChanged;

        // Initialize user service
        await userService.InitializeAsync();

        // Get the current user after initialization
        user = userService.currentUser;
        isInitialized = true;

        StateHasChanged();
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", true);
    }

    private void OnUserChanged()
    {
        user = userService.currentUser;
        StateHasChanged();
    }

    private string GetFirstName(string fullName)
    {
        if (string.IsNullOrEmpty(fullName))
            return fullName;

        // Split by space and return only the first part
        return fullName.Split(' ')[0];
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/home");
    }

    private void NavigateToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/profile");
    }

    private void NavigateToOrders()
    {
        Navigation.NavigateTo("/orders");
    }

    private async Task HandleLogout()
    {
        await authService.LogoutAsync();
        Navigation.NavigateTo("/login", true);
    }

    public void Dispose()
    {
        // Important: Unsubscribe to prevent memory leaks
        cartService.OnCartUpdated -= StateHasChanged;
        userService.OnUserChanged -= OnUserChanged;
    }
}