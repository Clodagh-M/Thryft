@page "/cart"

@using Microsoft.AspNetCore.Components.Authorization
@using Thryft.Models
@using Thryft.Services

@inject CartService cartService
@inject NavigationManager Navigation
@inject ProductIconService productIconService
@inject ProductService productService

@rendermode InteractiveServer

<PageTitle>Thryft - Shopping Cart</PageTitle>

<AuthorizeView>
    <Authorized>

        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4">

            @if (cartService.CurrentCart.Items.Any())
            {
                <MudGrid>
                    <MudItem xs="12" md="8">
                        <MudText Typo="Typo.h4" Class="mb-4">Shopping Cart</MudText>

                        @foreach (var item in cartService.CurrentCart.Items)
                        {
                            <MudCard Class="mb-3">
                                <MudCardContent>
                                    <MudGrid>
                                        <MudItem xs="12" sm="3">
                                            <div class="product-icon-container"
                                                 style="width: 100px; height: 100px; background-color: #f5f5f5; display: flex; align-items: center; justify-content: center; border-radius: 8px;">
                                                <i class="@productIconService.GetProductIcon(GetProductCategory(item.ProductId), item.SelectedColor)"
                                                   style="@productIconService.GetColorStyle(item.SelectedColor) font-size: 40px;"></i>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudText Typo="Typo.h6">@item.ProductName</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Primary">€@item.Price</MudText>

                                            @if (item.SelectedColor.HasValue)
                                            {
                                                <MudText Typo="Typo.caption">Color: @item.SelectedColor.Value</MudText>
                                            }

                                            <MudSpacer/>

                                            @if (item.SelectedSize.HasValue)
                                            {
                                                <MudText Typo="Typo.caption">Size: @item.SelectedSize.Value</MudText>
                                            }
                                        </MudItem>
                                        <MudItem xs="12" sm="3">
                                            <div class="d-flex align-center justify-end">
                                                <MudIconButton Icon="@Icons.Material.Filled.Remove"
                                                               OnClick="@(() => DecreaseQuantity(item))"
                                                               Size="MudBlazor.Size.Small" />
                                                <MudText Typo="Typo.h6" Class="mx-3">@item.Quantity</MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Add"
                                                               OnClick="@(() => IncreaseQuantity(item))"
                                                               Size="MudBlazor.Size.Small" />
                                            </div>
                                            <MudText Typo="Typo.h6" Class="text-right mt-2">€@item.TotalPrice</MudText>
                                            <MudButton Variant="Variant.Text"
                                                       Color="Color.Error"
                                                       Size="MudBlazor.Size.Small"
                                                       StartIcon="@Icons.Material.Filled.Delete"
                                                       OnClick="@(() => RemoveItem(item))"
                                                       Class="mt-1">
                                                Remove
                                            </MudButton>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        }

                        <div class="text-right mt-3">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Error"
                                       OnClick="ClearCart"
                                       StartIcon="@Icons.Material.Filled.ClearAll">
                                Clear Cart
                            </MudButton>
                        </div>
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudCard>
                            <MudCardContent>
                                <MudText Typo="Typo.h5" Class="mb-3">Order Summary</MudText>

                                <div class="d-flex justify-space-between mb-2">
                                    <MudText Typo="Typo.body1">Items (@cartService.CurrentCart.TotalItems):</MudText>
                                    <MudText Typo="Typo.body1">€@cartService.CurrentCart.TotalPrice</MudText>
                                </div>

                                <div class="d-flex justify-space-between mb-2">
                                    <MudText Typo="Typo.body1">Shipping:</MudText>
                                    <MudText Typo="Typo.body1">€5.00</MudText>
                                </div>

                                <MudDivider Class="my-3" />

                                <div class="d-flex justify-space-between">
                                    <MudText Typo="Typo.h6">Total:</MudText>
                                    <MudText Typo="Typo.h6">€@(cartService.CurrentCart.TotalPrice + 5.00m)</MudText>
                                </div>

                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           FullWidth="true"
                                           Class="mt-4"
                                           OnClick="ProceedToCheckout">
                                    Proceed to Checkout
                                </MudButton>

                                <MudButton Variant="Variant.Text"
                                           Color="Color.Primary"
                                           FullWidth="true"
                                           Class="mt-2"
                                           OnClick="ContinueShopping">
                                    Continue Shopping
                                </MudButton>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <div class="text-center py-8">
                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="MudBlazor.Size.Large" Color="Color.Primary" Class="mb-3" />
                    <MudText Typo="Typo.h4" Class="mb-3">Your cart is empty</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Info" Class="mb-4">
                        Looks like you haven't added any items to your cart yet.
                    </MudText>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="ContinueShopping"
                               StartIcon="@Icons.Material.Filled.ShoppingBag">
                        Start Shopping
                    </MudButton>
                </div>
            }

        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer Class="text-center py-16">
            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="MudBlazor.Size.Large" Color="Color.Primary" Class="mb-4" />
            <MudText Typo="Typo.h4" Class="mb-3">Authentication Required</MudText>
            <MudText Typo="Typo.body1" Color="Color.Primary" Class="mb-4">
                Please log in to view your shopping cart.
            </MudText>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="RedirectToLogin"
                       StartIcon="@Icons.Material.Filled.Login">
                Log In
            </MudButton>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<Product> allProducts = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        cartService.OnCartUpdated += StateHasChanged;

        allProducts = await productService.GetProductsAsync() ?? new List<Product>();

        StateHasChanged();
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", true);
    }

    private string GetProductCategory(int productId)
    {
        // Find the product and return its actual category
        var product = allProducts.FirstOrDefault(p => p.ProductId == productId);
        return product?.Category ?? "clothing"; // Default fallback
    }

    private void IncreaseQuantity(CartItem item)
    {
        cartService.UpdateQuantity(item.ProductId, item.SelectedColor, item.SelectedSize, item.Quantity + 1);
    }

    private void DecreaseQuantity(CartItem item)
    {
        if (item.Quantity > 1)
        {
            cartService.UpdateQuantity(item.ProductId, item.SelectedColor, item.SelectedSize, item.Quantity - 1);
        }
    }

    private void RemoveItem(CartItem item)
    {
        cartService.RemoveFromCart(item.ProductId, item.SelectedColor, item.SelectedSize);
    }

    private void ClearCart()
    {
        cartService.ClearCart();
    }

    private void ContinueShopping()
    {
        Navigation.NavigateTo("/home");
    }

    private void ProceedToCheckout()
    {
        Navigation.NavigateTo("/checkout");
    }

    public void Dispose()
    {
        cartService.OnCartUpdated -= StateHasChanged;
    }
}