@page "/checkout"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Thryft.Models
@using Thryft.Services

@inject CartService cartService
@inject InventoryService inventoryService
@inject NavigationManager Navigation
@inject ILogger<Checkout> Logger
@inject UserService userService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@rendermode InteractiveServer

<style>
    .website-header {
        background: linear-gradient(135deg, #ffa396 20%, #eb8691 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
    }

    .checkout-container {
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        border: 1px solid #e8e8e8;
        overflow: hidden;
    }

    .section-title {
        position: relative;
        padding-bottom: 12px;
        margin-bottom: 20px;
    }

    .section-title::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 60px;
        height: 3px;
        background: linear-gradient(90deg, #1976d2 0%, #42a5f5 100%);
        border-radius: 3px;
    }

    .order-summary-card {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        border: 1px solid #e9ecef;
    }

    .empty-state {
        padding: 80px 20px;
        text-align: center;
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        border: 1px solid #e0e0e0;
        text-align: center;
        transition: transform 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .checkout-btn {
        border-radius: 12px;
        padding: 12px 24px;
        font-weight: 600;
        text-transform: none;
        transition: all 0.3s ease;
    }

    .checkout-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(25, 118, 210, 0.3);
    }

    .detail-badge {
        background-color: #f0f4f8;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.8rem;
        color: #5a6c7d;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 4px;
        margin-right: 8px;
        margin-bottom: 4px;
    }

    .product-icon-container {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 10px;
        margin-right: 16px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
</style>

<PageTitle>Thryft - Checkout</PageTitle>

<AuthorizeView>
    <Authorized>
        <!-- Hero Header matching home page -->
        <div class="website-header">
            <MudContainer MaxWidth="MaxWidth.Large">
                <div class="hero-section">
                    <MudText Typo="Typo.h3" Class="mb-3" Style="font-weight: 700;">
                        Checkout
                    </MudText>
                    <MudText Typo="Typo.h6" Class="mb-4" Style="opacity: 0.9;">
                        Complete your purchase securely
                    </MudText>
                </div>
            </MudContainer>
        </div>

        <MudContainer MaxWidth="MaxWidth.Large" Class="my-6">
    @if (_orderCompleted)
    {
        <!-- Order Confirmation -->
        <div class="text-center py-8">
            <div class="mb-4" style="font-size: 80px; color: #4caf50;">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" />
            </div>
            <MudText Typo="Typo.h3" Class="mb-3" Color="Color.Success">Order Confirmed!</MudText>
            <MudText Typo="Typo.h6" Color="Color.Info" Class="mb-2">
                Thank you for your purchase, @_shippingInfo.FullName!
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Info" Class="mb-4">
                Your order has been processed successfully. Order ID: #@_orderId
            </MudText>
            <div class="d-flex justify-center gap-3 mt-4">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           OnClick="ReturnToHome"
                           StartIcon="@Icons.Material.Filled.Home">
                    Return to Home
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="ViewOrderDetails"
                           EndIcon="@Icons.Material.Filled.ArrowForward">
                    View Order Details
                </MudButton>
            </div>
        </div>
    }
    else if (!cartService.CurrentCart.Items.Any())
    {
        <!-- Empty Cart State -->
        <MudCard Class="empty-state">
            <MudCardContent>
                <div class="mb-4" style="font-size: 64px; color: #e0e0e0;">
                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
                </div>
                <MudText Typo="Typo.h4" Class="mb-3" Color="Color.Primary">Your Cart is Empty</MudText>
                <MudText Typo="Typo.body1" Color="Color.Primary" Class="mb-4">
                    Add some items to your cart before proceeding to checkout.
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="ReturnToHome"
                           EndIcon="@Icons.Material.Filled.ArrowForward"
                           Class="px-5 py-3"
                           Style="border-radius: 10px;">
                    Start Shopping
                </MudButton>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <!-- Order Statistics -->
        <MudItem xs="12" Class="mb-6">
            <div class="stats-grid">
                <div class="stat-card">
                    <MudText Typo="Typo.h6" Color="Color.Primary">Total Items</MudText>
                    <MudText Typo="Typo.h4">@cartService.CurrentCart.TotalItems</MudText>
                </div>
                <div class="stat-card">
                    <MudText Typo="Typo.h6" Color="Color.Info">Subtotal</MudText>
                    <MudText Typo="Typo.h4">€@cartService.CurrentCart.TotalPrice.ToString("F2")</MudText>
                </div>
                <div class="stat-card">
                    <MudText Typo="Typo.h6" Color="Color.Success">Shipping</MudText>
                    <MudText Typo="Typo.h4">€5.00</MudText>
                </div>
                <div class="stat-card">
                    <MudText Typo="Typo.h6" Color="Color.Warning">Total</MudText>
                    <MudText Typo="Typo.h4">€@_totalAmount.ToString("F2")</MudText>
                </div>
            </div>
        </MudItem>

        <MudGrid Spacing="4">
            <!-- Order Summary -->
            <MudItem xs="12" lg="5">
                <div class="checkout-container">
                    <MudCardContent Class="py-4">
                        <MudText Typo="Typo.h5" Class="section-title">Order Summary</MudText>
                        
                        <div class="cart-container" style="max-height: 400px; overflow-y: auto;">
                            @foreach (var item in cartService.CurrentCart.Items)
                            {
                                <MudCard Class="mb-3">
                                    <MudCardContent Class="py-3">
                                        <MudGrid Spacing="2" AlignItems="AlignItems.Center">
                                            <MudItem xs="3">
                                                <div class="product-icon-container">
                                                    <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" Size="MudBlazor.Size.Medium" Color="Color.Primary" />
                                                </div>
                                            </MudItem>
                                            <MudItem xs="6">
                                                <div class="d-flex flex-column">
                                                    <MudText Typo="Typo.subtitle2" Class="product-name mb-1">
                                                        @item.ProductName
                                                    </MudText>
                                                    <div class="d-flex flex-wrap">
                                                        @if (item.SelectedColor.HasValue)
                                                        {
                                                            <div class="detail-badge">
                                                                <MudIcon Icon="@Icons.Material.Filled.Palette" Size="MudBlazor.Size.Small" />
                                                                @item.SelectedColor.Value
                                                            </div>
                                                        }
                                                        @if (item.SelectedSize.HasValue)
                                                        {
                                                            <div class="detail-badge">
                                                                <MudIcon Icon="@Icons.Material.Filled.Straighten" Size="MudBlazor.Size.Small" />
                                                                @item.SelectedSize.Value
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="3" Class="text-right">
                                                <MudText Typo="Typo.body2">×@item.Quantity</MudText>
                                                <MudText Typo="Typo.subtitle2" Color="Color.Primary">
                                                    €@item.TotalPrice.ToString("F2")
                                                </MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            }
                        </div>

                        <MudDivider Class="my-3" />

                        <div class="order-summary-card">
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudText Typo="Typo.body1">Subtotal:</MudText>
                                <MudText Typo="Typo.body1" Class="font-weight-bold">
                                    €@cartService.CurrentCart.TotalPrice.ToString("F2")
                                </MudText>
                            </div>
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudText Typo="Typo.body1">Shipping:</MudText>
                                <MudText Typo="Typo.body1" Class="font-weight-bold">€5.00</MudText>
                            </div>
                            <MudDivider Class="my-2" />
                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.h6">Total:</MudText>
                                <MudText Typo="Typo.h5" Color="Color.Primary" Class="font-weight-bold">
                                    €@_totalAmount.ToString("F2")
                                </MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </div>
            </MudItem>

            <!-- Checkout Form -->
            <MudItem xs="12" lg="7">
                <div class="checkout-container">
                    <MudCardContent Class="py-4">
                        <MudText Typo="Typo.h5" Class="section-title">Shipping Information</MudText>

                        <MudGrid Spacing="3">
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_shippingInfo.FullName"
                                              Label="Full Name"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="_shippingInfo.AddressLine1"
                                              Label="Address Line 1"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="_shippingInfo.AddressLine2"
                                              Label="Address Line 2 (Optional)"
                                              Variant="Variant.Outlined"
                                              FullWidth="true" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="_shippingInfo.City"
                                              Label="City / Town"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudSelect T="string"
                                           @bind-Value="_shippingInfo.County"
                                           Variant="Variant.Outlined"
                                           Required="true"
                                           FullWidth="true">
                                    <MudSelectItem Value="@string.Empty">Select County</MudSelectItem>
                                    @foreach (var county in _irishCounties)
                                    {
                                        <MudSelectItem Value="@county">@county</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="_shippingInfo.Eircode"
                                              Label="Eircode"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true"
                                              HelperText="Format: A65 F4E2" />
                            </MudItem>
                        </MudGrid>

                        <MudText Typo="Typo.h5" Class="section-title mt-6">Payment Information</MudText>

                        <MudGrid Spacing="3">
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_paymentInfo.CardNumber"
                                              Label="Card Number"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true"
                                              InputMask="0000 0000 0000 0000" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="_paymentInfo.ExpiryDate"
                                              Label="Expiry Date (MM/YY)"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true"
                                              InputMask="00/00" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="_paymentInfo.CVV"
                                              Label="CVV"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true"
                                              InputMask="000" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="_paymentInfo.CardholderName"
                                              Label="Cardholder Name"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              FullWidth="true" />
                            </MudItem>
                        </MudGrid>

                        @if (_errorMessage != null)
                        {
                            <MudAlert Severity="Severity.Error" Class="mt-4" Variant="Variant.Filled">
                                <MudAlertTitle>Error</MudAlertTitle>
                                @_errorMessage
                            </MudAlert>
                        }

                        <div class="d-flex gap-3 mt-6">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       OnClick="ReturnToCart"
                                       FullWidth="true"
                                       StartIcon="@Icons.Material.Filled.ArrowBack">
                                Back to Cart
                            </MudButton>

                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="ProcessOrder"
                                       FullWidth="true"
                                       Disabled="_isProcessing"
                                       Class="checkout-btn"
                                       EndIcon="@Icons.Material.Filled.Lock">
                                @(_isProcessing ? "Processing..." : $"Pay €{_totalAmount.ToString("F2")}")
                            </MudButton>
                        </div>
                    </MudCardContent>
                </div>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

    </Authorized>
    <NotAuthorized>
        <!-- Matching the home page's unauthorized state -->
        <div class="website-header">
            <MudContainer MaxWidth="MaxWidth.Medium" Class="text-center py-16">
                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="MudBlazor.Size.Large" Color="Color.Tertiary" Class="mb-4" />
                <MudText Typo="Typo.h4" Class="mb-3" Style="color: white;">Authentication Required</MudText>
                <MudText Typo="Typo.h6" Class="mb-4" Style="color: white; opacity: 0.9;">
                    Please log in to complete your purchase
                </MudText>
                <MudButton Variant="Variant.Filled"
                          Color="Color.Tertiary"
                          OnClick="RedirectToLogin"
                          StartIcon="@Icons.Material.Filled.Login"
                          Style="color: #667eea;">
                    Log In to Checkout
                </MudButton>
            </MudContainer>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private decimal _totalAmount;
    private bool _isProcessing = false;
    private bool _orderCompleted = false;
    private string? _errorMessage;
    private string _orderId = Guid.NewGuid().ToString()[..8].ToUpper();

    private User user;
    private int _currentUserId;

    private ShippingInfo _shippingInfo = new();
    private PaymentInfo _paymentInfo = new();

    private readonly List<string> _irishCounties = new()
    {
        "Antrim", "Armagh", "Carlow", "Cavan", "Clare", "Cork", "Derry", "Donegal",
        "Down", "Dublin", "Fermanagh", "Galway", "Kerry", "Kildare", "Kilkenny",
        "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath",
        "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Tyrone",
        "Waterford", "Westmeath", "Wexford", "Wicklow"
    };

    [Inject] private OrderService? OrderService { get; set; }
    [Inject] private ProductIconService? ProductIconService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userService.OnUserChanged += OnUserChanged;
        user = userService.currentUser;
        _currentUserId = user?.UserId ?? 0;

        // if (!cartService.CurrentCart.Items.Any())
        // {
        //     Snackbar.Add("Your cart is empty. Add some items before checkout.", Severity.Warning);
        //     Navigation.NavigateTo("/cart");
        //     return;
        // }

        _totalAmount = cartService.CurrentCart.TotalPrice + 5.00m;
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", true);
    }

    private void OnUserChanged()
    {
        user = userService.currentUser;
        StateHasChanged();
    }

    private async Task ProcessOrder()
    {
        if (!ValidateForm())
        {
            return;
        }

        _isProcessing = true;
        _errorMessage = null;
        StateHasChanged();

        var reducedItems = new List<(int ProductId, Colour? Color, Thryft.Models.Size? Size, int Quantity)>();

        try
        {
            // Simulate processing delay
            await Task.Delay(2000);

            // Reduce inventory quantities
            foreach (var item in cartService.CurrentCart.Items)
            {
                var success = await inventoryService.ReduceInventory(
                    item.ProductId,
                    item.SelectedColor,
                    item.SelectedSize,
                    item.Quantity);

                if (success)
                {
                    reducedItems.Add((item.ProductId, item.SelectedColor, item.SelectedSize, item.Quantity));
                }
                else
                {
                    await RestoreReducedInventory(reducedItems);
                    _errorMessage = $"Item '{item.ProductName}' is no longer available in the requested quantity. Please review your cart.";
                    _isProcessing = false;
                    StateHasChanged();
                    return;
                }
            }

            // Simulate payment processing
            var paymentSuccessful = await ProcessPayment();

            if (!paymentSuccessful)
            {
                await RestoreReducedInventory(reducedItems);
                _errorMessage = "Payment processing failed. Please check your payment information and try again.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            // Create and save order to database
            var orderSuccess = await CreateOrderInDatabase();

            if (!orderSuccess)
            {
                await RestoreReducedInventory(reducedItems);
                _errorMessage = "Failed to create order. Please try again.";
                _isProcessing = false;
                StateHasChanged();
                return;
            }

            // Set order completed FIRST, then clear cart
            _orderCompleted = true;

            // Clear cart after setting the completion flag
            cartService.ClearCart();

            Logger.LogInformation("Order {OrderId} completed successfully for {CustomerName}",
                _orderId, _shippingInfo.FullName);

            Snackbar.Add($"Order #{_orderId} confirmed successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            await RestoreReducedInventory(reducedItems);
            _errorMessage = "An error occurred while processing your order. Please try again.";
            Logger.LogError(ex, "Error processing order");
            Snackbar.Add("Order processing failed. Please try again.", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task<bool> CreateOrderInDatabase()
    {
        if (OrderService == null)
        {
            Logger.LogError("OrderService is null - check if it's registered in DI container");
            return false;
        }

        try
        {
            var order = new Order
            {
                UserId = _currentUserId,
                Total = _totalAmount,
                Created = DateTime.UtcNow,
                Status = "Processing",
                OrderItems = cartService.CurrentCart.Items.Select(item => new OrderItem
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity,
                    UnitPrice = item.Price,
                    SelectedColour = item.SelectedColor,
                    SelectedSize = item.SelectedSize
                }).ToList()
            };

            Logger.LogInformation("Attempting to create order for user {UserId} with {ItemCount} items",
                _currentUserId, order.OrderItems.Count);

            var createdOrder = await OrderService.CreateOrderAsync(order);

            if (createdOrder == null || createdOrder.OrderId <= 0)
            {
                Logger.LogError("OrderService.CreateOrderAsync returned null or invalid OrderId");
                return false;
            }

            // Update the order ID with the actual database ID
            _orderId = createdOrder.OrderId.ToString();
            Logger.LogInformation("Order created successfully with ID: {OrderId}", _orderId);
            return true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating order in database. UserId: {UserId}, Total: {Total}",
                _currentUserId, _totalAmount);
            return false;
        }
    }

    private async Task RestoreReducedInventory(List<(int ProductId, Colour? Color, Thryft.Models.Size? Size, int Quantity)> reducedItems)
    {
        foreach (var item in reducedItems)
        {
            await inventoryService.RestoreInventory(
                item.ProductId,
                item.Color,
                item.Size,
                item.Quantity);
        }
    }

    private bool ValidateForm()
    {
        // Shipping Information Validation
        if (string.IsNullOrWhiteSpace(_shippingInfo.FullName))
        {
            _errorMessage = "Please enter your full name.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(_shippingInfo.AddressLine1))
        {
            _errorMessage = "Please enter your address.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(_shippingInfo.City))
        {
            _errorMessage = "Please enter your city/town.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(_shippingInfo.County))
        {
            _errorMessage = "Please select your county.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(_shippingInfo.Eircode))
        {
            _errorMessage = "Please enter your Eircode.";
            return false;
        }

        // Eircode validation (basic format check)
        var eircodeRegex = new System.Text.RegularExpressions.Regex(@"^[A-Z0-9]{3}\s?[A-Z0-9]{4}$");
        if (!eircodeRegex.IsMatch(_shippingInfo.Eircode.ToUpper().Replace(" ", "")))
        {
            _errorMessage = "Please enter a valid Eircode (e.g., A65 F4E2).";
            return false;
        }

        // Payment Information Validation
        if (string.IsNullOrWhiteSpace(_paymentInfo.CardNumber))
        {
            _errorMessage = "Please enter your card number.";
            return false;
        }

        var cleanCardNumber = _paymentInfo.CardNumber.Replace(" ", "");
        if (cleanCardNumber.Length != 16 || !cleanCardNumber.All(char.IsDigit))
        {
            _errorMessage = "Please enter a valid 16-digit card number.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(_paymentInfo.ExpiryDate))
        {
            _errorMessage = "Please enter the expiry date.";
            return false;
        }

        if (!System.Text.RegularExpressions.Regex.IsMatch(_paymentInfo.ExpiryDate, @"^\d{2}/\d{2}$"))
        {
            _errorMessage = "Please enter a valid expiry date (MM/YY).";
            return false;
        }

        // Check if card is expired
        var parts = _paymentInfo.ExpiryDate.Split('/');
        if (parts.Length == 2 && int.TryParse(parts[0], out int month) && int.TryParse(parts[1], out int year))
        {
            var currentDate = DateTime.Now;
            var expiryDate = new DateTime(2000 + year, month, 1).AddMonths(1).AddDays(-1);
            if (expiryDate < currentDate)
            {
                _errorMessage = "Your card has expired. Please use a valid card.";
                return false;
            }
        }

        if (string.IsNullOrWhiteSpace(_paymentInfo.CVV))
        {
            _errorMessage = "Please enter the CVV.";
            return false;
        }

        if (_paymentInfo.CVV.Length != 3 || !_paymentInfo.CVV.All(char.IsDigit))
        {
            _errorMessage = "Please enter a valid 3-digit CVV.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(_paymentInfo.CardholderName))
        {
            _errorMessage = "Please enter the cardholder name.";
            return false;
        }

        _errorMessage = null;
        return true;
    }

    private async Task<bool> ProcessPayment()
    {
        // Simulate payment processing with 95% success rate
        await Task.Delay(1500);
        var random = new Random();
        return random.NextDouble() < 1; // 95% success rate for demo
    }

    private void ReturnToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private void ReturnToHome()
    {
        Navigation.NavigateTo("/home");
    }

    private void ViewOrderDetails()
    {
        Navigation.NavigateTo($"/order-details/{_orderId}");
    }

    // Model classes
    private class ShippingInfo
    {
        public string FullName { get; set; } = "";
        public string AddressLine1 { get; set; } = "";
        public string AddressLine2 { get; set; } = "";
        public string City { get; set; } = "";
        public string County { get; set; } = "";
        public string Eircode { get; set; } = "";
    }

    private class PaymentInfo
    {
        public string CardNumber { get; set; } = "";
        public string ExpiryDate { get; set; } = "";
        public string CVV { get; set; } = "";
        public string CardholderName { get; set; } = "";
    }

    public void Dispose()
    {
        userService.OnUserChanged -= OnUserChanged;
    }
}