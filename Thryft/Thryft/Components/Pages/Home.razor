@page "/home"
@using Thryft.Models
@using Thryft.Services
@inject UserService userService
@inject ProductService productService
@inject CartService cartService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<MudContainer>

    <MudGrid>
        <MudItem xs="10">
            <MudTextField Value="@searchTerm"
                          ValueChanged="@(async (string value) => await HandleSearchChanged(value))"
                          T="string"
                          Placeholder="Search Products..."
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Clearable="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Outlined.Search"
                          Immediate="true" />
        </MudItem>
    </MudGrid>

    <MudGrid>

        @foreach (var product in filteredProducts)
        {
            <MudItem xs="12" sm="6" md="4" lg="6">
                <MudCard>
                    <MudCardHeader Class="mud-theme-primary">
                        <MudText Typo="Typo.h6">@product.ProductName</MudText>
                        <MudSpacer />
                        <MudChip Color="Color.Tertiary" T="string" Style="color: #000">@string.Concat("€" + @product.Price)</MudChip>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudButton Class="mb-2"
                                           OnClick="@(() => ToggleColours(product.ProductId))"
                                           EndIcon="@(GetColourExpandedState(product.ProductId) ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)">
                                    Available Colors:
                                </MudButton>
                                <MudCollapse Expanded="@GetColourExpandedState(product.ProductId)">
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var colour in product.Colours)
                                        {
                                            <MudChip T="Colour"
                                                     Value="@colour"
                                                     OnClick="@(() => SelectColor(product.ProductId, colour))"
                                                     Variant="GetSelectedColor(product.ProductId) == colour ? Variant.Filled : Variant.Outlined"
                                                     Class="color-chip p-0"
                                                     Style="@GetChipStyle(colour)">
                                                ㅤ
                                            </MudChip>
                                        }
                                    </div>
                                </MudCollapse>
                            </MudItem>

                            <MudItem xs="6">
                                <MudButton Class="mb-2"
                                           OnClick="@(() => ToggleSizes(product.ProductId))"
                                           EndIcon="@(GetSizeExpandedState(product.ProductId) ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)">
                                    Available Sizes:
                                </MudButton>
                                <MudCollapse Expanded="@GetSizeExpandedState(product.ProductId)">
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var size in product.Sizes)
                                        {
                                            <MudChip T="Thryft.Models.Size"
                                                     Value="@size"
                                                     OnClick="@(() => SelectSize(product.ProductId, size))"
                                                     Color="GetSelectedSize(product.ProductId) == size ? Color.Primary : Color.Default"
                                                     Variant="GetSelectedSize(product.ProductId) == size ? Variant.Filled : Variant.Outlined"
                                                     Class="size-chip">
                                                @size
                                            </MudChip>
                                        }
                                    </div>
                                </MudCollapse>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudGrid>
                            <MudItem xs="8" Class="text-right">
                                <MudText Typo="Typo.caption" Color="@(product.Stock > 0 ? Color.Success : Color.Error)">
                                    @(product.Stock > 0 ? $"{product.Stock} left" : "Sold out")
                                </MudText>
                            </MudItem>
                            <MudItem xs="4" Class="text-right">
                                <MudSpacer />
                                <MudButton Style="width: 100%"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Disabled="@(!CanAddToCart(product))"
                                           OnClick="@(() => AddToCart(product))">
                                    Add to Cart
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }

    </MudGrid>

</MudContainer>

@code {
    private List<User> users;
    private List<Product> allProducts;
    private List<Product> filteredProducts;
    private string searchTerm = string.Empty;

    // Use dictionaries to track expanded state and selections per product
    private Dictionary<int, bool> colourExpandedStates = new Dictionary<int, bool>();
    private Dictionary<int, bool> sizeExpandedStates = new Dictionary<int, bool>();
    private Dictionary<int, Colour?> selectedColors = new Dictionary<int, Colour?>();
    private Dictionary<int, Thryft.Models.Size?> selectedSizes = new Dictionary<int, Thryft.Models.Size?>();

    protected override async Task OnInitializedAsync()
    {
        allProducts = await productService.GetProductsAsync();
        filteredProducts = allProducts;

        // Initialize expanded states for all products
        foreach (var product in allProducts)
        {
            colourExpandedStates[product.ProductId] = true;
            sizeExpandedStates[product.ProductId] = true;
        }

        cartService.OnCartUpdated += StateHasChanged;
    }

    private bool CanAddToCart(Product product)
    {
        return product.Stock > 0;
    }

    private void AddToCart(Product product)
    {
        var selectedColor = GetSelectedColor(product.ProductId);
        var selectedSize = GetSelectedSize(product.ProductId);

        cartService.AddToCart(product, selectedColor, selectedSize);

        StateHasChanged();

        // Show a notification (you might want to use MudBlazor's Snackbar)
        // _snackbar.Add("Item added to cart!", Severity.Success);
    }

    private void ToggleColours(int productId)
    {
        if (colourExpandedStates.ContainsKey(productId))
        {
            colourExpandedStates[productId] = !colourExpandedStates[productId];
        }
        else
        {
            colourExpandedStates[productId] = false;
        }
        StateHasChanged();
    }

    private void ToggleSizes(int productId)
    {
        if (sizeExpandedStates.ContainsKey(productId))
        {
            sizeExpandedStates[productId] = !sizeExpandedStates[productId];
        }
        else
        {
            sizeExpandedStates[productId] = false;
        }
        StateHasChanged();
    }

    private bool GetColourExpandedState(int productId)
    {
        return colourExpandedStates.ContainsKey(productId) ? colourExpandedStates[productId] : true;
    }

    private bool GetSizeExpandedState(int productId)
    {
        return sizeExpandedStates.ContainsKey(productId) ? sizeExpandedStates[productId] : true;
    }

    private Colour? GetSelectedColor(int productId)
    {
        return selectedColors.ContainsKey(productId) ? selectedColors[productId] : null;
    }

    private Thryft.Models.Size? GetSelectedSize(int productId)
    {
        return selectedSizes.ContainsKey(productId) ? selectedSizes[productId] : null;
    }

    private void SelectColor(int productId, Colour colour)
    {
        selectedColors[productId] = GetSelectedColor(productId) != colour ? colour : null;
        StateHasChanged();
    }

    private void SelectSize(int productId, Thryft.Models.Size size)
    {
        selectedSizes[productId] = GetSelectedSize(productId) != size ? size : null;
        StateHasChanged();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterProducts();
    }

    private async Task HandleSearchChanged(string value)
    {
        searchTerm = value;
        FilterProducts();
        await Task.CompletedTask;
    }

    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProducts = allProducts;
            return;
        }

        var searchTerms = searchTerm.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                                  .Select(term => term.Trim().ToLowerInvariant())
                                  .ToArray();

        filteredProducts = allProducts.Where(product =>
        {
            // Search in product name
            var nameMatches = searchTerms.Any(term =>
                product.ProductName?.Contains(term, StringComparison.OrdinalIgnoreCase) == true);

            // Search in category
            var categoryMatches = searchTerms.Any(term =>
                product.Category?.Contains(term, StringComparison.OrdinalIgnoreCase) == true);

            // Search in colors
            var colorMatches = searchTerms.Any(term =>
                product.Colours?.Any(color =>
                    color.ToString().Contains(term, StringComparison.OrdinalIgnoreCase)) == true);

            return nameMatches || categoryMatches || colorMatches;
        }).ToList();

        StateHasChanged();
    }

    private string GetChipStyle(Colour colour)
    {
        return $"min-width: 33px !important; background-color: {GetColorHex(colour)}; color: {GetTextColor(colour)}; border: 2px solid {GetBorderColor(colour)}; min-width: 60px;";
    }

    private string GetColorHex(Colour colour)
    {
        return colour switch
        {
            Colour.Red => "#f44336",
            Colour.Blue => "#2196f3",
            Colour.Green => "#4caf50",
            Colour.Black => "#000000",
            Colour.White => "#ffffff",
            Colour.Yellow => "#ffeb3b",
            Colour.Pink => "#e91e63",
            Colour.Purple => "#9c27b0",
            Colour.Orange => "#ff9800",
            Colour.Grey => "#9e9e9e",
            Colour.Brown => "#795548",
            Colour.Navy => "#001f3f",
            Colour.Teal => "#39cccc",
            Colour.Maroon => "#85144b",
            Colour.Beige => "#f5f5dc",
            _ => "#ffffff"
        };
    }

    private string GetTextColor(Colour colour)
    {
        return colour switch
        {
            Colour.Black or Colour.Navy or Colour.Maroon or Colour.Brown or Colour.Purple => "#ffffff",
            _ => "#000000"
        };
    }

    private string GetBorderColor(Colour colour)
    {
        return colour switch
        {
            Colour.White or Colour.Beige or Colour.Yellow => "#ccc",
            _ => "transparent"
        };
    }

    public void Dispose()
    {
        cartService.OnCartUpdated -= StateHasChanged;
    }
}