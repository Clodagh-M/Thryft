@page "/home"

@using Microsoft.AspNetCore.Components.Authorization
@using Thryft.Models
@using Thryft.Services

@inject UserService userService
@inject ProductService productService
@inject CartService cartService
@inject NavigationManager Navigation
@inject ProductIconService productIconService

@inject AuthService authService

@rendermode InteractiveServer


<style>
    .website-header {
        background: linear-gradient(135deg, #ffa396 20%, #eb8691 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
    }

    .hero-section {
        text-align: center;
        padding: 3rem 0;
    }

    /* Main content wrapper */
    .main-content-wrapper {
        display: flex;
        gap: 2rem;
        align-items: flex-start;
        min-height: auto;
    }

    /* Filter column */
    .filter-column {
        flex: 0 0 300px;
        transition: all 0.3s ease-in-out;
    }

    .filter-column.filter-closed {
        display: none;
    }

    .filter-column.filter-open {
        display: block;
    }

    .filter-sidebar {
        top: 2rem;
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        height: fit-content;
        box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        position: sticky;
    }

    /* Products column */
    .products-column {
        flex: 1;
        min-height: 500px;
    }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        padding: 0;
        align-items: start;
    }

    .product-card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        overflow: hidden;
        background: white;
        height: fit-content;
        display: flex;
        flex-direction: column;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .product-image {
        height: 200px;
        background: linear-gradient(45deg, #f8f9fa, #e9ecef);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 4rem;
    }

    .product-header {
        background: linear-gradient(135deg, #ffa396 20%, #eb8691 100%);
        color: white;
        padding: 1rem;
    }

    .color-chip {
        transition: all 0.2s ease;
        border: 2px solid transparent;
    }

    .color-chip:hover {
        transform: scale(1.1);
    }

    .selected-color {
        transform: scale(1.2);
        border: 2px solid #333 !important;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }

    .filter-section {
        margin-bottom: 2rem;
    }

    .filter-title {
        font-weight: 600;
        margin-bottom: 1rem;
        color: #2d3748;
        font-size: 1.1rem;
    }

    .active-filters {
        background: #f7fafc;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        border-left: 4px solid #eb8691;
    }

    .stock-badge {
        position: absolute;
        z-index: 10;
    }

    .price-tag {
        background: linear-gradient(135deg, #48bb78, #38a169);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .search-container {
        max-width: 600px;
        margin: 0 auto;
    }

    .controls-bar {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1rem !important;
        z-index: 200;
    }

    .no-products {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .category-badge {
        background: #edf2f7;
        color: #4a5568;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .circle-section {
        height: 85px;
        overflow-y: auto;
        scrollbar-width: none;
    }

    .circle-section::-webkit-scrollbar {
        display: none;
    }

    /* Container fixes */
    mud-container {
        display: block !important;
        height: auto !important;
        min-height: auto !important;
    }

    .mud-grid {
        align-items: start !important;
    }

    .mud-item {
        display: flex !important;
        flex-direction: column !important;
    }

    /* Mobile responsiveness */
    @@media (max-width: 960px) {
        .main-content-wrapper {
            flex-direction: column;
        }
        
        .filter-column {
            flex: none;
            width: 100%;
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            z-index: 2500;
            background: white;
            transform: translateX(-100%);
            transition: transform 0.3s ease-in-out;
            overflow-y: auto;
        }
        
        .filter-column.filter-open {
            transform: translateX(0);
        }
        
        .products-column {
            width: 100%;
        }

        .filter-sidebar {
            position: relative;
            top: 0;
            box-shadow: none;
            height: 100%;
            border-radius: 0;
        }
    }
</style>

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="website-header">
            <MudContainer MaxWidth="MaxWidth.Large">
                <div class="hero-section">
                    <MudText Typo="Typo.h3" Class="mb-3" Style="font-weight: 700;">
                        Welcome to Thryft
                    </MudText>
                    <MudText Typo="Typo.h6" Class="mb-4" Style="opacity: 0.9;">
                        Discover Amazing Products at Great Prices
                    </MudText>
                    
                    <!-- Search Bar in Hero -->
                    <div class="search-container">
                        <MudTextField Value="@searchTerm"
                                    ValueChanged="@(async (string value) => await OnSearchChanged(value))"
                                    T="string"
                                    Placeholder="Search for products, categories, colors..."
                                    Variant="Variant.Filled"
                                    Margin="Margin.Dense"
                                    Clearable="true"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search"
                                    Immediate="true"
                                    Class="mt-4"
                                    Style="background: rgba(255,255,255,0.9); border-radius: 25px;" />
                    </div>
                </div>
            </MudContainer>
        </div>

        <MudContainer MaxWidth="MaxWidth.Large" Class="position-relative">
            <!-- Controls Bar -->
            <div class="controls-bar">
                <MudGrid Spacing="2" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                    <MudItem xs="12" sm="6" md="4">
                        <MudGrid Spacing="1">
                            <MudItem xs="6">
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary" 
                                          OnClick="ToggleFilters"
                                          StartIcon="@Icons.Material.Filled.FilterList"
                                          FullWidth="true">
                                    Filters
                                </MudButton>
                            </MudItem>
                            <MudItem xs="6">
                                <MudMenu Variant="Variant.Outlined" 
                                        Color="Color.Primary" 
                                        Label="Sort By" 
                                        StartIcon="@Icons.Material.Filled.Sort"
                                        Style="min-width: 200px;"
                                        FullWidth="true">
                                    <MudMenuItem OnClick="@(() => OnSortChanged("name-asc"))">
                                        <MudIcon Icon="@Icons.Material.Filled.SortByAlpha" Class="mr-2" />
                                        Name (A-Z)
                                    </MudMenuItem>
                                    <MudMenuItem OnClick="@(() => OnSortChanged("name-desc"))">
                                        <MudIcon Icon="@Icons.Material.Filled.SortByAlpha" Class="mr-2" />
                                        Name (Z-A)
                                    </MudMenuItem>
                                    <MudDivider />
                                    <MudMenuItem OnClick="@(() => OnSortChanged("price-asc"))">
                                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-2" />
                                        Price (Low to High)
                                    </MudMenuItem>
                                    <MudMenuItem OnClick="@(() => OnSortChanged("price-desc"))">
                                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-2" />
                                        Price (High to Low)
                                    </MudMenuItem>
                                    <MudDivider />
                                    <MudMenuItem OnClick="@(() => OnSortChanged("stock-desc"))">
                                        <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
                                        Stock (High to Low)
                                    </MudMenuItem>
                                    <MudMenuItem OnClick="@(() => OnSortChanged("stock-asc"))">
                                        <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
                                        Stock (Low to High)
                                    </MudMenuItem>
                                </MudMenu>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    
                    <MudItem xs="12" sm="12" md="4" Class="d-flex justify-end">
                        <MudText Typo="Typo.body2" Color="Color.Primary" Class="mr-2">
                            @(filteredProducts?.Count ?? 0) products found
                        </MudText>
                    </MudItem>

                    @if (user?.Email == "thryft-sa-user@gmail.com")
                    {
                        <MudItem xs="12" sm="6" md="4" Class="d-flex justify-end">
                            <MudMenu Variant="Variant.Filled" 
                                    Color="Color.Info" 
                                    Label="Admin Panel" 
                                    StartIcon="@Icons.Material.Filled.AdminPanelSettings"
                                    Style="min-width: 200px;">
                                <MudMenuItem OnClick="NavigateToAddProducts">
                                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" />
                                    Add Products
                                </MudMenuItem>
                                <MudMenuItem OnClick="NavigateToUpdateStatus">
                                    <MudIcon Icon="@Icons.Material.Filled.ListAlt" Class="mr-2" />
                                    Order Status
                                </MudMenuItem>
                            </MudMenu>
                        </MudItem>
                    }
                </MudGrid>
            </div>

            <!-- Active Filters Display -->
            @if (activeFilters.Any())
            {
                <div class="active-filters">
                    <MudGrid Spacing="2" AlignItems="AlignItems.Center">
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2" Class="mr-2" Style="font-weight: 600;">
                                Active Filters:
                            </MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var filter in activeFilters)
                                {
                                    <MudChip T="string" 
                                            Color="Color.Primary"
                                            Variant="Variant.Filled"
                                            Size="MudBlazor.Size.Small"
                                            OnClose="@(() => RemoveActiveFilter(filter))"
                                            CloseIcon="@Icons.Material.Filled.Clear">
                                        @filter.DisplayText
                                    </MudChip>
                                }
                            </div>
                        </MudItem>
                        @if (activeFilters.Count > 1)
                        {
                            <MudItem xs="12">
                                <MudButton Variant="Variant.Text"
                                           Size="MudBlazor.Size.Small"
                                          OnClick="ClearAllActiveFilters"
                                          StartIcon="@Icons.Material.Filled.ClearAll"
                                          Color="Color.Error">
                                    Clear All
                                </MudButton>
                            </MudItem>
                        }
                    </MudGrid>
                </div>
            }

            <!-- Main Content - Fixed Layout -->
            <div class="main-content-wrapper">
                <!-- Filter Sidebar -->
                <div class="filter-column @(showFilters ? "filter-open" : "filter-closed")">
                    <div class="filter-sidebar position-sticky">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <MudText Typo="Typo.h6" Class="m-0" Style="font-weight: 600;">Filters</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                         OnClick="ToggleFilters" 
                                         Color="Color.Default"
                                         Class="d-md-none" />
                        </div>

                        <!-- Stock Filter -->
                        <div class="filter-section">
                            <div class="filter-title">Availability</div>
                            <MudCheckBox T="bool"
                                        Color="Color.Primary"
                                        Value="@showInStockOnly"
                                        ValueChanged="@(async (bool value) => await OnStockFilterChanged(value))"
                                        Label="In Stock Only"
                                        Class="mb-2" />
                        </div>

                        <MudDivider Class="my-3" />

                        <!-- Color Filter -->
                        <div class="filter-section">
                            <div class="filter-title">Colors</div>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var colour in allProducts.SelectMany(p => p.Colours).Distinct().OrderBy(c => c.ToString()))
                                {
                                    <div class="text-center">
                                        <MudChip T="Colour"
                                                Value="@colour"
                                                OnClick="@(() => OnColorFilterChanged(colour))"
                                                Variant="@(selectedColorsFilter.Contains(colour) ? Variant.Filled : Variant.Outlined)"
                                                Icon="@(selectedColorsFilter.Contains(colour) ? Icons.Material.Filled.Check : "none")"
                                                Class="color-chip p-0"
                                                Style="@GetChipStyle(colour)">
                                            @if (!selectedColorsFilter.Contains(colour))
                                            {
                                                <span>ㅤ</span>
                                            }
                                        </MudChip>
                                        <MudText Typo="Typo.caption" Class="mt-1">@colour</MudText>
                                    </div>
                                }
                            </div>
                        </div>

                        <MudDivider Class="my-3" />

                        <!-- Price Range Filter -->
                        <div class="filter-section">
                            <div class="filter-title">Price Range</div>
                            <div class="px-1">
                                <MudText Typo="Typo.body2" Class="mb-1" Color="Color.Info">€@minPriceFilter - €@maxPriceFilter</MudText>
                                <MudSlider T="decimal"
                                          Min="0"
                                          Color="Color.Dark"
                                          Max="@maxPrice"
                                          Step="1"
                                          Value="@minPriceFilter"
                                          ValueChanged="@(async (decimal value) => await OnMinPriceChanged(value))"
                                          Immediate="true"
                                          Class="mb-4" />

                                <MudSlider T="decimal"
                                          Min="0"
                                          Color="Color.Dark"
                                          Max="@maxPrice"
                                          Step="1"
                                          Value="@maxPriceFilter"
                                          ValueChanged="@(async (decimal value) => await OnMaxPriceChanged(value))"
                                          Immediate="true" />
                            </div>
                        </div>

                        <MudDivider Class="my-3" />

                        <MudButton Variant="Variant.Outlined"
                                  Color="Color.Error"
                                  OnClick="ClearAllFilters"
                                  FullWidth="true"
                                  StartIcon="@Icons.Material.Filled.Clear"
                                  Class="mb-2">
                            Clear All Filters
                        </MudButton>
                    </div>
                </div>

                <!-- Products Grid -->
                <div class="products-column">
                    @if (filteredProducts?.Any() == true)
                    {
                        <div class="product-grid">
                            @foreach (var product in filteredProducts)
                            {
                                <MudCard Class="product-card">
                                    <!-- Product Image/Icon Area -->
                                    <div class="product-image">
                                        <i class="@productIconService.GetProductIcon(product.Category, GetSelectedColor(product.ProductId))"
                                           style="@productIconService.GetColorStyle(GetSelectedColor(product.ProductId)) font-size: 64px;"></i>
                                    </div>

                                    <!-- Stock Badge -->
                                    <div class="stock-badge">
                                        @if (product.Stock > 10)
                                        {
                                            <MudChip T="string" Color="Color.Success" Variant="Variant.Filled" Size="MudBlazor.Size.Small">
                                                In Stock
                                            </MudChip>
                                        }
                                        else if (product.Stock > 0)
                                        {
                                            <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled" Size="MudBlazor.Size.Small">
                                                Low Stock
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Color="Color.Error" Variant="Variant.Filled" Size="MudBlazor.Size.Small">
                                                Sold Out
                                            </MudChip>
                                        }
                                    </div>

                                    <div class="product-header">
                                        <MudText Typo="Typo.h6" Class="mb-1" Style="font-weight: 600;">@product.ProductName</MudText>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="category-badge">@product.Category</span>
                                            <span class="price-tag">€@product.Price.ToString("F2")</span>
                                        </div>
                                    </div>

                                    <MudCardContent>
                                        <!-- Colors Section -->
                                        <div class="mb-3">
                                            <div class="d-flex align-items-center mb-1">
                                                <MudButton Variant="Variant.Text"
                                                           Size="MudBlazor.Size.Small"
                                                           Color="Color.Primary">
                                                    Colours 
                                                </MudButton>
                                                @if (GetSelectedColor(product.ProductId) == null)
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Warning" Class="ml-1">
                                                        (Required)
                                                    </MudText>
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Info" Class="ml-1">
                                                        @string.Concat("(" + ((GetSelectedColor(product.ProductId)?.ToString()) ?? "") + ")")
                                                    </MudText>
                                                }
                                            </div>

                                            <div class="d-flex flex-wrap gap-2 circle-section mt-2">
                                                @foreach (var colour in product.Colours)
                                                {
                                                    <MudChip T="Colour"
                                                             Value="@colour"
                                                             OnClick="@(() => SelectColor(product.ProductId, colour))"
                                                             Variant="GetSelectedColor(product.ProductId)?.ToString() == colour.ToString() ? Variant.Filled : Variant.Outlined"
                                                             Class="@GetChipClass(product.ProductId, colour)"
                                                             Style="@GetChipStyle(colour)"
                                                             Size="MudBlazor.Size.Medium">
                                                        <span>ㅤ</span>
                                                    </MudChip>
                                                }
                                            </div>
                                        </div>

                                        <!-- Sizes Section -->
                                        <div class="mb-3">
                                            <div class="d-flex align-items-center mb-1">
                                                <MudButton Variant="Variant.Text"
                                                           Size="MudBlazor.Size.Small"
                                                           Color="Color.Primary">
                                                    Sizes 
                                                </MudButton>
                                                @if (GetSelectedSize(product.ProductId) == null)
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Warning" Class="ml-1">
                                                        (Required)
                                                    </MudText>
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Info" Class="ml-1">
                                                        @string.Concat("(" + (GetSelectedSize(product.ProductId) != null ? (selectedSizes[product.ProductId]) : "") + ")")
                                                    </MudText>
                                                }
                                            </div>

                                            <div class="d-flex flex-wrap gap-2 circle-section mt-2">
                                                @foreach (var size in product.Sizes)
                                                {
                                                    <MudChip T="Thryft.Models.Size"
                                                             Value="@size"
                                                             OnClick="@(() => SelectSize(product.ProductId, size))"
                                                             Color="GetSelectedSize(product.ProductId) == size ? Color.Primary : Color.Default"
                                                             Variant="GetSelectedSize(product.ProductId) == size ? Variant.Filled : Variant.Outlined"
                                                             Size="MudBlazor.Size.Medium">
                                                        @size
                                                    </MudChip>
                                                }
                                            </div>
                                        </div>
                                    </MudCardContent>

                                    <MudCardActions Class="justify-end">
                                        <MudTooltip Text="@GetAddToCartTooltip(product)" Placement="Placement.Top">
                                            <MudButton Variant="Variant.Filled"
                                                       Color="Color.Primary"
                                                       Disabled="@(!CanAddToCart(product))"
                                                       OnClick="@(() => AddToCart(product))"
                                                       StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                                       FullWidth="true">
                                                Add to Cart
                                            </MudButton>
                                        </MudTooltip>
                                    </MudCardActions>
                                </MudCard>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-products">
                            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="MudBlazor.Size.Large" Color="Color.Primary" Class="mb-3" />
                            <MudText Typo="Typo.h5" Class="mb-3">No products found</MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                                Try adjusting your search terms or filters to find what you're looking for.
                            </MudText>
                            <MudButton Variant="Variant.Outlined"
                                      Color="Color.Primary"
                                      OnClick="ClearAllFilters"
                                      StartIcon="@Icons.Material.Filled.Clear">
                                Clear All Filters
                            </MudButton>
                        </div>
                    }
                </div>
            </div>
        </MudContainer>

        <!-- Mobile Filter Overlay -->
        @if (showFilters)
        {
            <div class="filter-overlay position-fixed top-0 start-0 w-100 h-100 d-md-none"
                 style="background-color: rgba(0, 0, 0, 0.5); z-index: 2400;"
                 @onclick="ToggleFilters"></div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="website-header">
            <MudContainer MaxWidth="MaxWidth.Medium" Class="text-center py-16">
                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="MudBlazor.Size.Large" Color="Color.Tertiary" Class="mb-4" />
                <MudText Typo="Typo.h4" Class="mb-3" Style="color: white;">Welcome to Thryft</MudText>
                <MudText Typo="Typo.h6" Class="mb-4" Style="color: white; opacity: 0.9;">
                    Please log in to browse our premium collection
                </MudText>
                <MudButton Variant="Variant.Filled"
                          Color="Color.Tertiary"
                          OnClick="RedirectToLogin"
                          StartIcon="@Icons.Material.Filled.Login"
                          Style="color: #667eea;">
                    Log In to Shop
                </MudButton>
            </MudContainer>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private User user;

    private bool _pageInitialized = false;

    private List<User> users;
    private List<Product> allProducts;
    private List<Product> filteredProducts;
    private string searchTerm = string.Empty;

    private List<ActiveFilter> activeFilters = new List<ActiveFilter>();

    // Filter states
    private bool showFilters = false;
    private HashSet<string> selectedCategories = new HashSet<string>();
    private HashSet<Colour> selectedColorsFilter = new HashSet<Colour>();
    private decimal minPriceFilter = 0;
    private decimal maxPriceFilter = 1000;
    private bool showInStockOnly = false;
    private decimal maxPrice = 1000;
    private string currentSort = "name-asc";

    // Use dictionaries to track expanded state and selections per product
    private Dictionary<int, bool> colourExpandedStates = new Dictionary<int, bool>();
    private Dictionary<int, bool> sizeExpandedStates = new Dictionary<int, bool>();
    private Dictionary<int, Colour?> selectedColors = new Dictionary<int, Colour?>();
    private Dictionary<int, Thryft.Models.Size?> selectedSizes = new Dictionary<int, Thryft.Models.Size?>();

    private Dictionary<string, bool> categoryStates = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        if (_pageInitialized)
        {
            // This is a reload, call logout
            await HandleLogout();
            return;
        }

        try
        {
            _pageInitialized = true;
            // Subscribe to user changes first
            userService.OnUserChanged += OnUserChanged;

            // Initialize user after userService is available
            user = userService.currentUser;

            // Initialize products with null handling
            allProducts = await productService.GetProductsAsync() ?? new List<Product>();
            filteredProducts = new List<Product>(allProducts);

            // Only proceed if we have products
            if (allProducts != null && allProducts.Any())
            {
                foreach (var product in allProducts)
                {
                    colourExpandedStates[product.ProductId] = true;
                    sizeExpandedStates[product.ProductId] = true;
                }

                maxPrice = allProducts.Max(p => p.Price);
                maxPriceFilter = Math.Ceiling(maxPrice);

                // Initialize category states with null checking
                var categories = allProducts.Select(p => p.Category).Distinct();
                if (categories != null)
                {
                    foreach (var category in categories)
                    {
                        if (!string.IsNullOrEmpty(category))
                        {
                            categoryStates[category] = false;
                        }
                    }
                }
            }
            else
            {
                // Initialize empty collections if no products
                allProducts = new List<Product>();
                filteredProducts = new List<Product>();
                maxPrice = 1000;
                maxPriceFilter = 1000;
            }

            ApplyAllFilters();
            cartService.OnCartUpdated += OnCartUpdated;
        }
        catch (Exception ex)
        {
            // Log the exception and initialize empty collections
            Console.WriteLine($"Error during initialization: {ex.Message}");
            allProducts = new List<Product>();
            filteredProducts = new List<Product>();
            maxPrice = 1000;
            maxPriceFilter = 1000;
        }

        StateHasChanged();
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", true);
    }

    private void OnUserChanged()
    {
        user = userService.currentUser;
        StateHasChanged();
    }

    private bool GetCategoryBinding(string category)
    {
        return selectedCategories.Contains(category);
    }

    private void NavigateToAddProducts()
    {
        Navigation.NavigateTo("/admin/add-product");
    }

    private void NavigateToUpdateStatus()
    {
        Navigation.NavigateTo("/admin/order-status-update");
    }

private void SetCategoryBinding(string category, bool value)
{
    if (value)
        selectedCategories.Add(category);
    else
        selectedCategories.Remove(category);

    ApplyAllFilters();
}

    private void OnCartUpdated()
    {
        if (!_disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
        StateHasChanged();
    }

    private void CloseFilters()
    {
        showFilters = false;
        StateHasChanged();
    }

    private void OnCategoryFilterChanged(string category, bool isChecked)
    {
        if (isChecked)
            selectedCategories.Add(category);
        else
            selectedCategories.Remove(category);

        ApplyAllFilters();
    }

    private void OnCategoryStateChanged(string category, bool value)
    {
        categoryStates[category] = value;

        if (value)
            selectedCategories.Add(category);
        else
            selectedCategories.Remove(category);

        ApplyAllFilters();
    }

    private void OnColorFilterChanged(Colour color)
    {
        if (selectedColorsFilter.Contains(color))
            selectedColorsFilter.Remove(color);
        else
            selectedColorsFilter.Add(color);

        ApplyAllFilters();
    }

    private async Task OnMinPriceChanged(decimal value)
    {
        minPriceFilter = value;
        if (minPriceFilter > maxPriceFilter)
            maxPriceFilter = minPriceFilter;

        ApplyAllFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMaxPriceChanged(decimal value)
    {
        maxPriceFilter = value;
        if (maxPriceFilter < minPriceFilter)
            minPriceFilter = maxPriceFilter;

        ApplyAllFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnStockFilterChanged(bool isChecked)
    {
        showInStockOnly = isChecked;
        ApplyAllFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchChanged(string value)
    {
        searchTerm = value;
        ApplyAllFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSortChanged(string sortOption)
    {
        currentSort = sortOption;
        SortProducts();
        await InvokeAsync(StateHasChanged);
    }

    private void ApplyAllFilters()
    {
        // Start with all products or empty list if null
        var results = allProducts?.AsEnumerable() ?? Enumerable.Empty<Product>();

        // Apply search filter - match ALL search terms
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var searchTerms = searchTerm.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            results = results.Where(product =>
                product != null &&
                searchTerms.All(term =>
                    product.ProductName?.Contains(term, StringComparison.OrdinalIgnoreCase) == true ||
                    product.Category?.Contains(term, StringComparison.OrdinalIgnoreCase) == true ||
                    product.Colours?.Any(color => color.ToString().Contains(term, StringComparison.OrdinalIgnoreCase)) == true ||
                    product.Sizes?.Any(size => size.ToString().Contains(term, StringComparison.OrdinalIgnoreCase)) == true
                )
            );
        }

        // Apply category filters
        if (selectedCategories.Any())
        {
            results = results.Where(p => p != null && selectedCategories.Contains(p.Category));
        }

        // Apply color filters
        if (selectedColorsFilter.Any())
        {
            results = results.Where(p => p != null && p.Colours?.Any(c => selectedColorsFilter.Contains(c)) == true);
        }

        // Apply price filter
        results = results.Where(p => p != null && p.Price >= minPriceFilter && p.Price <= maxPriceFilter);

        // Apply stock filter
        if (showInStockOnly)
        {
            results = results.Where(p => p != null && p.Stock > 0);
        }

        filteredProducts = results.ToList();
        SortProducts();
        UpdateActiveFilters();
    }

    private void SortProducts()
    {
        var query = filteredProducts?.AsEnumerable() ?? Enumerable.Empty<Product>();

        switch (currentSort)
        {
            case "name-asc":
                query = query.OrderBy(p => p?.ProductName);
                break;
            case "name-desc":
                query = query.OrderByDescending(p => p?.ProductName);
                break;
            case "price-asc":
                query = query.OrderBy(p => p?.Price ?? 0);
                break;
            case "price-desc":
                query = query.OrderByDescending(p => p?.Price ?? 0);
                break;
            case "stock-desc":
                query = query.OrderByDescending(p => p?.Stock ?? 0);
                break;
            case "stock-asc":
                query = query.OrderBy(p => p?.Stock ?? 0);
                break;
            default:
                query = query.OrderBy(p => p?.ProductName);
                break;
        }

        filteredProducts = query.Where(p => p != null).ToList();
    }

    private void ClearAllFilters()
    {
        selectedCategories.Clear();
        selectedColorsFilter.Clear();
        minPriceFilter = 0;
        maxPriceFilter = maxPrice;
        showInStockOnly = false;
        searchTerm = string.Empty;
        currentSort = "name-asc";

        // Reset category states
        foreach (var category in categoryStates.Keys.ToList())
        {
            categoryStates[category] = false;
        }

        ApplyAllFilters();
        StateHasChanged();
    }

    private void UpdateActiveFilters()
    {
        activeFilters.Clear();

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            activeFilters.Add(new ActiveFilter("search", searchTerm, $"Search: \"{searchTerm}\"", searchTerm));
        }

        // Category filters
        foreach (var category in selectedCategories)
        {
            activeFilters.Add(new ActiveFilter("category", category, $"Category: {category}", category));
        }

        // Color filters
        foreach (var color in selectedColorsFilter)
        {
            activeFilters.Add(new ActiveFilter("color", color.ToString(), $"Color: {color}", color));
        }

        // Price range filter
        if (minPriceFilter > 0 || maxPriceFilter < maxPrice)
        {
            activeFilters.Add(new ActiveFilter("price", $"{minPriceFilter}-{maxPriceFilter}",
                $"Price: €{minPriceFilter:F2} - €{maxPriceFilter:F2}"));
        }

        // Stock filter
        if (showInStockOnly)
        {
            activeFilters.Add(new ActiveFilter("stock", "instock", "In Stock Only", true));
        }
    }

    private void RemoveActiveFilter(ActiveFilter filter)
    {
        switch (filter.Type)
        {
            case "category":
                selectedCategories.Remove(filter.Value);
                break;
            case "color":
                var colorToRemove = (Colour)filter.OriginalValue!;
                selectedColorsFilter.Remove(colorToRemove);
                break;
            case "price":
                minPriceFilter = 0;
                maxPriceFilter = maxPrice;
                break;
            case "stock":
                showInStockOnly = false;
                break;
            case "search":
                searchTerm = string.Empty;
                break;
        }

        ApplyAllFilters();
        StateHasChanged();
    }

    private void ClearAllActiveFilters()
    {
        ClearAllFilters();
    }

    private bool CanAddToCart(Product product)
    {
        var selectedColor = GetSelectedColor(product.ProductId);
        var selectedSize = GetSelectedSize(product.ProductId);

        return product.Stock > 0 &&
               selectedColor != null &&
               selectedSize != null;
    }

    private string GetAddToCartTooltip(Product product)
    {
        if (product.Stock <= 0)
            return "Out of stock";

        var selectedColor = GetSelectedColor(product.ProductId);
        var selectedSize = GetSelectedSize(product.ProductId);

        if (selectedColor == null && selectedSize == null)
            return "Please select a color and size";
        else if (selectedColor == null)
            return "Please select a color";
        else if (selectedSize == null)
            return "Please select a size";
        else
            return "Add to cart";
    }

    private void NavigateToCart() => Navigation.NavigateTo("/cart");

    private void AddToCart(Product product)
    {
        var selectedColor = GetSelectedColor(product.ProductId);
        var selectedSize = GetSelectedSize(product.ProductId);

        cartService.AddToCart(product, selectedColor, selectedSize);
        StateHasChanged();
    }

    private void ToggleColours(int productId)
    {
        if (colourExpandedStates.ContainsKey(productId))
            colourExpandedStates[productId] = !colourExpandedStates[productId];
        StateHasChanged();
    }

    private void ToggleSizes(int productId)
    {
        if (sizeExpandedStates.ContainsKey(productId))
            sizeExpandedStates[productId] = !sizeExpandedStates[productId];
        StateHasChanged();
    }

    private bool GetColourExpandedState(int productId) =>
        colourExpandedStates.ContainsKey(productId) ? colourExpandedStates[productId] : true;

    private bool GetSizeExpandedState(int productId) =>
        sizeExpandedStates.ContainsKey(productId) ? sizeExpandedStates[productId] : true;

    private Colour? GetSelectedColor(int productId) =>
        selectedColors.ContainsKey(productId) ? selectedColors[productId] : null;

    private Thryft.Models.Size? GetSelectedSize(int productId) =>
        selectedSizes.ContainsKey(productId) ? selectedSizes[productId] : null;

    private void SelectColor(int productId, Colour colour)
    {
        selectedColors[productId] = GetSelectedColor(productId) == colour ? null : colour;
        StateHasChanged();
    }

    private void SelectSize(int productId, Thryft.Models.Size size)
    {
        selectedSizes[productId] = GetSelectedSize(productId) == size ? null : size;
        StateHasChanged();
    }

    private string GetChipClass(int productId, Colour colour)
    {
        var baseClass = "color-chip p-0";
        return GetSelectedColor(productId) == colour ? $"{baseClass} selected-color" : baseClass;
    }

    private string GetChipStyle(Colour colour)
    {
        return $"min-width: 33px !important; background-color: {GetColorHex(colour)}; color: {GetTextColor(colour)}; border: 2px solid {GetBorderColor(colour)}; min-width: 60px;";
    }

    private string GetColorHex(Colour colour) => colour switch
    {
        Colour.Red => "#f44336",
        Colour.Blue => "#2196f3",
        Colour.Green => "#4caf50",
        Colour.Black => "#000000",
        Colour.White => "#ffffff",
        Colour.Yellow => "#ffeb3b",
        Colour.Pink => "#e91e63",
        Colour.Purple => "#9c27b0",
        Colour.Orange => "#ff9800",
        Colour.Grey => "#9e9e9e",
        Colour.Brown => "#795548",
        Colour.Navy => "#001f3f",
        Colour.Teal => "#39cccc",
        Colour.Maroon => "#85144b",
        Colour.Beige => "#f5f5dc",
        Colour.Gold => "#FFD700",        
        Colour.Silver => "#C0C0C0",      
        Colour.RoseGold => "#B76E79",    
        Colour.Multicolour => "#FF69B4", // Bright/fun color to represent multiple colors
        Colour.Assorted => "#9370DB",    // Medium purple - distinct but neutral
        _ => "#ffffff"
    };

    private string GetTextColor(Colour colour) => colour switch
    {
        Colour.Black or Colour.Navy or Colour.Maroon or Colour.Brown or Colour.Purple => "#ffffff",
        _ => "#000000"
    };

    private string GetBorderColor(Colour colour) => colour switch
    {
        Colour.White or Colour.Beige or Colour.Yellow => "#ccc",
        _ => "transparent"
    };

    private async Task HandleLogout()
    {
        await authService.LogoutAsync();
        Navigation.NavigateTo("/login", true);
    }

    private bool _disposed = false;

    public void Dispose()
    {
        _disposed = true;
        cartService.OnCartUpdated -= OnCartUpdated;
    }
}