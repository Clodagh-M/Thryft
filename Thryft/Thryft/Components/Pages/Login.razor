@page "/login"
@using Thryft.Models
@using Thryft.Services
@inject UserService userService
@inject NavigationManager navigationManager
@inject ISnackbar SnackBar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>


<MudContainer MaxWidth="MaxWidth.Small" Class="py-16">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4" Class="text-center mb-4">Login</MudText>
            <MudForm @ref="form">
                <MudTextField T="string" Label="Email" RequiredError="Email is required!" @bind-Value="email" Immediate="true"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                <MudTextField T="string" Label="Password" InputType="InputType.Password" @bind-Value="password" @ref="pwField"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Immediate="true"
                              RequiredError="Password is required!" />
            </MudForm>
        </MudCardContent>
        <MudCardActions Class="justify-center">
            <MudGrid>
                <MudItem xs="12">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="HandleLogin"
                       FullWidth="true"
                       Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Size="MudBlazor.Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Logging in...</MudText>
                }
                else
                {
                    <MudText>Login</MudText>
                }
            </MudButton>

                </MudItem>
                <MudItem xs="12">
            @if (showActivationMessage)
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="my-2">
                    <MudText>Activating your account, please wait...</MudText>
                </MudAlert>
            }
                </MudItem>
            <MudItem xs="12">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
            }
                </MudItem>
            </MudGrid>
        </MudCardActions>
        
    </MudCard>

    <MudCard>

        <MudText Class="text-center my-4">
            Don't have an account? <MudLink Href="/">Register here</MudLink></MudText>

    </MudCard>

</MudContainer>

@code {
    MudForm form;
    private string email;
    private string password;
    private string errorMessage;
    MudTextField<string> pwField;
    MudOverlay activatingOverlay;
    private bool showActivationMessage = false;

    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;

        await form.Validate();

        if (!form.IsValid)
            return;

        try
        {
            var user = await userService.ValidateUserCredentialsAsync(email.ToLower(), password);


            if (user != null)
            {
                Console.WriteLine($"User found: {user}");

                //If user is deactivated mark as active
                if (user.IsActive == false)
                {
                    showActivationMessage = true;
                    // Force state update before navigation
                    StateHasChanged();
                    await userService.activateAccount(user);
    
                    await Task.Delay(2000); // Small delay to ensure UI updates
                    showActivationMessage = false;
                }
                    navigationManager.NavigateTo("/home", forceLoad: false); // Don't force load
            }
            else
            {
                errorMessage = "Invalid email or password";
                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
            StateHasChanged();
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
}