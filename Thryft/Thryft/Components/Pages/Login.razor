@page "/login"
@using Thryft.Models
@using Thryft.Services
@inject UserService userService
@inject NavigationManager navigationManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard Class="pa-4">
            <MudForm @ref="form">
                <MudTextField T="string" Label="Email" RequiredError="Email is required!" @bind-Value="email" Immediate="true"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                <MudTextField T="string" Label="Password" InputType="InputType.Password" @bind-Value="password" @ref="pwField"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Immediate="true"
                              RequiredError="Password is required!" />
            </MudForm>
        </MudCard>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleLogin">Login</MudButton>
        <MudSpacer />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }
    </MudItem>
</MudGrid>

@code {
    MudForm form;
    private string email;
    private string password;
    private string errorMessage;
    MudTextField<string> pwField;

    private async Task HandleLogin()
    {   await form.Validate();

        if (!form.IsValid)
            return;

        try
        {
            var user = await userService.ValidateUserCredentialsAsync(email, password);
            Console.WriteLine($"User found: {user}"); // This will show in browser console

            if (user != null)
            {
                navigationManager.NavigateTo("/home", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid email or password";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
            StateHasChanged();
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
}