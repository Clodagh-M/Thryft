@page "/orders"

@using Microsoft.AspNetCore.Components.Authorization
@using Thryft.Models
@using Thryft.Services

@inject OrderService orderService
@inject ProductIconService productIconService
@inject NavigationManager Navigation
@inject ProductService productService
@inject UserService userService
@inject CartService cartService
@inject InventoryService inventoryService

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@rendermode InteractiveServer

<style>
    .website-header {
        background: linear-gradient(135deg, #ffa396 20%, #eb8691 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
    }

    .orders-container {
        max-height: calc(100vh - 300px);
        overflow-y: auto;
        scrollbar-width: thin;
        padding-right: 8px;
    }

        .orders-container::-webkit-scrollbar {
            width: 6px;
        }

        .orders-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .orders-container::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 10px;
        }

    .order-card {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid #e8e8e8;
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 20px;
        background: white;
    }

        .order-card:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

    .order-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 1px solid #e0e0e0;
        padding: 20px 24px;
    }

    .order-item {
        border-bottom: 1px solid #f5f5f5;
        padding: 20px 24px;
        transition: background-color 0.2s ease;
    }

        .order-item:hover {
            background-color: #fafafa;
        }

        .order-item:last-child {
            border-bottom: none;
        }

    .product-icon-container {
        width: 70px;
        height: 70px;
        background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 10px;
        margin-right: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .status-chip {
        border-radius: 20px;
        padding: 6px 16px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .empty-state {
        padding: 80px 20px;
        text-align: center;
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .order-actions {
        background-color: #fafbfc;
        border-top: 1px solid #eaeaea;
        padding: 16px 24px;
    }

    .price-highlight {
        font-weight: 700;
        color: #1976d2;
        font-size: 1.1rem;
    }

    .order-id {
        font-weight: 600;
        color: #424242;
    }

    .order-date {
        color: #757575;
        font-size: 0.9rem;
    }

    .product-name {
        font-weight: 600;
        color: #424242;
        margin-bottom: 4px;
    }

    .product-details {
        display: flex;
        gap: 16px;
        margin-top: 8px;
    }

    .detail-badge {
        background-color: #f0f4f8;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.8rem;
        color: #5a6c7d;
        font-weight: 500;
    }

    .quantity-badge {
        background-color: #e3f2fd;
        color: #1565c0;
        padding: 6px 12px;
        border-radius: 16px;
        font-weight: 600;
    }

    .section-title {
        position: relative;
        padding-bottom: 12px;
        margin-bottom: 24px;
    }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 3px;
            background: linear-gradient(90deg, #1976d2 0%, #42a5f5 100%);
            border-radius: 3px;
        }

    .auth-required-container {
        background: white;
        border-radius: 16px;
        padding: 60px 40px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
        text-align: center;
        max-width: 500px;
        margin: 40px auto;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        border: 1px solid #e0e0e0;
        text-align: center;
        transition: transform 0.2s ease;
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

    .controls-bar {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        margin-bottom: 1.5rem !important;
        border: 1px solid #e8e8e8;
    }

    .filter-section {
        background: white;
        padding: 20px;
        border-radius: 12px;
        border: 1px solid #e8e8e8;
        margin-bottom: 24px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
</style>

<PageTitle>Thryft - My Orders</PageTitle>

<AuthorizeView>
    <Authorized>
        <!-- Hero Header matching home page -->
        <div class="website-header">
            <MudContainer MaxWidth="MaxWidth.Large">
                <div class="hero-section">
                    <MudText Typo="Typo.h3" Class="mb-3" Style="font-weight: 700;">
                        My Orders
                    </MudText>
                    <MudText Typo="Typo.h6" Class="mb-4" Style="opacity: 0.9;">
                        Track and manage your purchases
                    </MudText>
                </div>
            </MudContainer>
        </div>

        <MudContainer MaxWidth="MaxWidth.Large" Class="my-6">
            <!-- Order Statistics -->
            @if (_orders.Any())
            {
                <MudItem xs="12" Class="mb-6">
                    <div class="stats-grid">
                        <div class="stat-card">
                            <MudText Typo="Typo.h6" Color="Color.Primary">Total Orders</MudText>
                            <MudText Typo="Typo.h4">@_orders.Count</MudText>
                        </div>
                        <div class="stat-card">
                            <MudText Typo="Typo.h6" Color="Color.Warning">Processing</MudText>
                            <MudText Typo="Typo.h4">@_orders.Count(o => o.Status == "Processing")</MudText>
                        </div>
                        <div class="stat-card">
                            <MudText Typo="Typo.h6" Color="Color.Info">Shipped</MudText>
                            <MudText Typo="Typo.h4">@_orders.Count(o => o.Status == "Shipped")</MudText>
                        </div>
                        <div class="stat-card">
                            <MudText Typo="Typo.h6" Color="Color.Success">Completed</MudText>
                            <MudText Typo="Typo.h4">@_orders.Count(o => o.Status == "Completed")</MudText>
                        </div>
                    </div>
                </MudItem>
            }

            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center justify-space-between mb-4">
                    <div>
                        <MudText Typo="Typo.h4" Class="section-title mb-0">Order History</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Primary" Class="mt-2">
                            @(_orders.Any() ? "Review your past and current orders" : "Start shopping to see your orders here")
                        </MudText>
                    </div>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="ContinueShopping"
                               EndIcon="@Icons.Material.Filled.ArrowForward"
                               Class="px-4 py-2"
                               Style="border-radius: 10px;">
                        Continue Shopping
                    </MudButton>
                </MudItem>

                <!-- Filters and Search Section -->
                @if (_orders.Any())
                {
                    <MudItem xs="12">
                        <div class="filter-section">
                            <MudGrid Spacing="3">
                                <MudItem xs="12" Class="d-flex align-center justify-space-between mb-4">
                                    <MudText Typo="Typo.h4">Order Management</MudText>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               OnClick="RefreshOrders"
                                               StartIcon="@Icons.Material.Filled.Refresh">
                                        Refresh
                                    </MudButton>
                                </MudItem>
                                <MudItem xs="12" sm="6" md="3">
                                    <MudSelect T="string" @bind-Value="_statusFilter" Variant="Variant.Outlined">
                                        <MudSelectItem Value="@STATUS_ALL">All Statuses</MudSelectItem>
                                        <MudSelectItem Value="@STATUS_PROCESSING">Processing</MudSelectItem>
                                        <MudSelectItem Value="@STATUS_SHIPPED">Shipped</MudSelectItem>
                                        <MudSelectItem Value="@STATUS_COMPLETED">Completed</MudSelectItem>
                                        <MudSelectItem Value="@STATUS_CANCELLED">Cancelled</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="6" md="3">
                                    <MudTextField @bind-Value="_searchTerm"
                                                  Placeholder="Search Order ID..."
                                                  Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                                  Immediate="true" />
                                </MudItem>
                                <MudItem xs="12" sm="6" md="3">
                                    <MudSelect T="string" @bind-Value="_sortBy" Variant="Variant.Outlined">
                                        <MudSelectItem Value="@SORT_NEWEST">Newest First</MudSelectItem>
                                        <MudSelectItem Value="@SORT_OLDEST">Oldest First</MudSelectItem>
                                        <MudSelectItem Value="@SORT_TOTAL_HIGH">Total: High to Low</MudSelectItem>
                                        <MudSelectItem Value="@SORT_TOTAL_LOW">Total: Low to High</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="6" md="3" Class="d-flex align-end">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Info"
                                               OnClick="ClearFilters"
                                               FullWidth="true"
                                               StartIcon="@Icons.Material.Filled.Clear">
                                        Clear Filters
                                    </MudButton>
                                </MudItem>
                            </MudGrid>

                            <!-- Results Count -->
                            <MudText Typo="Typo.caption" Color="Color.Primary" Class="mt-2">
                                @if (_filteredOrders.Count != _orders.Count)
                                {
                                    <span>Showing @_filteredOrders.Count of @_orders.Count orders</span>
                                }
                                else
                                {
                                    <span>Showing all @_orders.Count orders</span>
                                }
                            </MudText>
                        </div>
                    </MudItem>
                }

                <MudItem xs="12">
                    @if (_filteredOrders.Any())
                    {
                        <div class="orders-container">
                            @foreach (var order in _filteredOrders)
                            {
                                <MudCard Class="order-card">
                                    <!-- Order Header -->
                                    <div class="order-header">
                                        <MudGrid Spacing="4">
                                            <MudItem xs="12" sm="7">
                                                <div class="d-flex flex-column">
                                                    <MudText Typo="Typo.h6" Class="order-id mb-2">
                                                        <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="mr-2" Size="MudBlazor.Size.Small" />
                                                        Order #@order.OrderId
                                                    </MudText>
                                                    <MudText Typo="Typo.body2" Class="order-date">
                                                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="MudBlazor.Size.Small" Class="mr-1" />
                                                        Placed on @order.Created.ToString("MMMM dd, yyyy 'at' h:mm tt")
                                                    </MudText>
                                                    <MudText Typo="Typo.body2" Class="order-date">
                                                        <MudIcon Icon="@Icons.Material.Filled.EditCalendar" Size="MudBlazor.Size.Small" Class="mr-1" />
                                                        Last Updated on @order.LastUpdated.ToString("MMMM dd, yyyy 'at' h:mm tt")
                                                    </MudText>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="12" sm="5" Class="d-flex align-center justify-sm-end">
                                                <div class="d-flex flex-column align-end">
                                                    <MudText Typo="Typo.h6" Class="price-highlight mb-2">
                                                        €@order.Total.ToString("F2")
                                                    </MudText>
                                                    <div class="status-chip @GetStatusClass(order.Status)">
                                                        @GetStatusText(order.Status)
                                                    </div>
                                                </div>
                                            </MudItem>
                                        </MudGrid>
                                    </div>

                                    <!-- Order Items -->
                                    <MudCardContent Class="pa-0">
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <div class="order-item">
                                                <MudGrid Spacing="4" AlignItems="AlignItems.Center">
                                                    <MudItem xs="12" sm="1" Class="d-flex align-center justify-center">
                                                        <div class="product-icon-container">
                                                            <i class="@productIconService.GetProductIcon(GetProductCategory(item.ProductId), item.SelectedColour)"
                                                               style="@productIconService.GetColorStyle(item.SelectedColour) font-size: 28px;"></i>
                                                        </div>
                                                    </MudItem>
                                                    <MudItem xs="12" sm="5">
                                                        <div class="d-flex flex-column">
                                                            <MudText Typo="Typo.subtitle1" Class="product-name">
                                                                @GetProductName(item.ProductId)
                                                            </MudText>
                                                            <div class="product-details">
                                                                @if (item.SelectedColour.HasValue)
                                                                {
                                                                    <div class="detail-badge">
                                                                        <MudIcon Icon="@Icons.Material.Filled.Palette" Size="MudBlazor.Size.Small" Class="mr-1" />
                                                                        @item.SelectedColour.Value
                                                                    </div>
                                                                }
                                                                @if (item.SelectedSize.HasValue)
                                                                {
                                                                    <div class="detail-badge">
                                                                        <MudIcon Icon="@Icons.Material.Filled.Straighten" Size="MudBlazor.Size.Small" Class="mr-1" />
                                                                        @item.SelectedSize.Value
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </MudItem>
                                                    <MudItem xs="6" sm="3" Class="d-flex align-center">
                                                        <div class="quantity-badge">
                                                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="MudBlazor.Size.Small" Class="mr-1" />
                                                            Qty: @item.Quantity
                                                        </div>
                                                    </MudItem>
                                                    <MudItem xs="6" sm="3" Class="d-flex align-center justify-end">
                                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                                            €@((item.UnitPrice * item.Quantity).ToString("F2"))
                                                        </MudText>
                                                    </MudItem>
                                                </MudGrid>
                                            </div>
                                        }
                                    </MudCardContent>

                                    <!-- Order Actions -->
                                    <div class="order-actions">
                                        <div class="d-flex justify-end w-100">
                                            @if (order.Status == "Processing")
                                            {
                                                <MudButton Variant="Variant.Outlined"
                                                           Color="Color.Error"
                                                           Size="MudBlazor.Size.Small"
                                                           Class="ml-2"
                                                           OnClick="@(() => CancelOrder(order))"
                                                           StartIcon="@Icons.Material.Filled.Cancel">
                                                    Cancel Order
                                                </MudButton>
                                            }
                                            <MudButton Variant="Variant.Text"
                                                       Color="Color.Primary"
                                                       Size="MudBlazor.Size.Small"
                                                       Class="ml-2"
                                                       OnClick="@(() => ViewOrderDetails(order))"
                                                       EndIcon="@Icons.Material.Filled.ArrowForward">
                                                View Details
                                            </MudButton>
                                        </div>
                                    </div>
                                </MudCard>
                            }
                        </div>
                    }
                    else
                    {
                        <MudCard Class="empty-state">
                            <MudCardContent>
                                <div class="mb-4" style="font-size: 64px; color: #e0e0e0;">
                                    <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" />
                                </div>
                                <MudText Typo="Typo.h4" Class="mb-3" Color="Color.Primary">
                                    @(_orders.Any() ? "No Orders Match Your Filters" : "No Orders Yet")
                                </MudText>
                                <MudText Typo="Typo.body1" Color="Color.Primary" Class="mb-4">
                                    @if (_orders.Any())
                                    {
                                        <span>No orders match your current filters. Try adjusting your search criteria.</span>
                                    }
                                    else
                                    {
                                        <span>You haven't placed any orders yet. Start shopping to see your orders here!</span>
                                    }
                                </MudText>
                                @if (_orders.Any())
                                {
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               OnClick="ClearFilters"
                                               StartIcon="@Icons.Material.Filled.ClearAll"
                                               Class="mr-2">
                                        Clear Filters
                                    </MudButton>
                                }
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           OnClick="ContinueShopping"
                                           EndIcon="@Icons.Material.Filled.ArrowForward"
                                           Class="px-5 py-3"
                                           Style="border-radius: 10px;">
                                    Start Shopping
                                </MudButton>
                            </MudCardContent>
                        </MudCard>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <!-- Matching the home page's unauthorized state -->
        <div class="website-header">
            <MudContainer MaxWidth="MaxWidth.Medium" Class="text-center py-16">
                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="MudBlazor.Size.Large" Color="Color.Tertiary" Class="mb-4" />
                <MudText Typo="Typo.h4" Class="mb-3" Style="color: white;">Access Your Orders</MudText>
                <MudText Typo="Typo.h6" Class="mb-4" Style="color: white; opacity: 0.9;">
                    Please log in to view your order history and track your purchases
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           OnClick="RedirectToLogin"
                           StartIcon="@Icons.Material.Filled.Login"
                           Style="color: #667eea;">
                    Log In to View Orders
                </MudButton>
            </MudContainer>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private User user;
    private List<Order> _orders = new List<Order>();
    private List<Order> _filteredOrders = new List<Order>();
    private Dictionary<int, string> _productNames = new Dictionary<int, string>();
    private Dictionary<int, string> _productCategories = new Dictionary<int, string>();

    // Filter and search state
    private string _statusFilter = "";
    private string _searchTerm = "";
    private string _sortBy = "newest";

    // Constants for filter options
    private const string STATUS_ALL = "";
    private const string STATUS_PROCESSING = "Processing";
    private const string STATUS_SHIPPED = "Shipped";
    private const string STATUS_COMPLETED = "Completed";
    private const string STATUS_CANCELLED = "Cancelled";

    private const string SORT_NEWEST = "newest";
    private const string SORT_OLDEST = "oldest";
    private const string SORT_TOTAL_HIGH = "total_high";
    private const string SORT_TOTAL_LOW = "total_low";

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to user changes
        userService.OnUserChanged += OnUserChanged;

        // Initialize user after userService is available
        user = userService.currentUser;

        StateHasChanged();

        await LoadOrders();
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", true);
    }

    private void OnUserChanged()
    {
        user = userService.currentUser;
        StateHasChanged();
    }

    private async Task LoadOrders()
    {
        try
        {
            _orders = await orderService.GetUserOrdersAsync(user.UserId) ?? new List<Order>();

            // Initialize filtered orders with all orders
            _filteredOrders = _orders.ToList();

            // Load product names and categories for display
            await LoadProductDetails();

            // Apply initial sorting (newest first by default)
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
    }

    private async Task LoadProductDetails()
    {
        try
        {
            var allProducts = await productService.GetProductsAsync();

            foreach (var order in _orders)
            {
                foreach (var item in order.OrderItems)
                {
                    if (!_productNames.ContainsKey(item.ProductId))
                    {
                        var product = allProducts.FirstOrDefault(p => p.ProductId == item.ProductId);

                        if (product != null)
                        {
                            _productNames[item.ProductId] = product.ProductName;
                            _productCategories[item.ProductId] = product.Category;
                        }
                        else
                        {
                            _productNames[item.ProductId] = $"Product #{item.ProductId}";
                            _productCategories[item.ProductId] = "clothing";
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product details: {ex.Message}");
            foreach (var order in _orders)
            {
                foreach (var item in order.OrderItems)
                {
                    if (!_productNames.ContainsKey(item.ProductId))
                    {
                        _productNames[item.ProductId] = $"Product #{item.ProductId}";
                        _productCategories[item.ProductId] = "clothing";
                    }
                }
            }
        }
    }

    private void ApplyFilters()
    {
        IEnumerable<Order> filtered = _orders.AsEnumerable();

        // Apply status filter
        if (!string.IsNullOrEmpty(_statusFilter))
        {
            filtered = filtered.Where(o => o.Status == _statusFilter);
        }

        // Apply search filter
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            filtered = filtered.Where(o =>
                o.OrderId.ToString().Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply sorting
        filtered = _sortBy switch
        {
            SORT_OLDEST => filtered.OrderBy(o => o.Created),
            SORT_TOTAL_HIGH => filtered.OrderByDescending(o => o.Total),
            SORT_TOTAL_LOW => filtered.OrderBy(o => o.Total),
            _ => filtered.OrderByDescending(o => o.Created) // newest first
        };

        _filteredOrders = filtered.ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _statusFilter = "";
        _searchTerm = "";
        _sortBy = SORT_NEWEST;
        ApplyFilters();
    }

    // Event handlers for filter changes
    private void OnStatusFilterChanged(string value)
    {
        _statusFilter = value;
        ApplyFilters();
    }

    private void OnSearchTermChanged(string value)
    {
        _searchTerm = value;
        ApplyFilters();
    }

    private void OnSortByChanged(string value)
    {
        _sortBy = value;
        ApplyFilters();
    }

    private string GetProductName(int productId)
    {
        return _productNames.ContainsKey(productId) ? _productNames[productId] : $"Product #{productId}";
    }

    private string GetProductCategory(int productId)
    {
        return _productCategories.ContainsKey(productId) ? _productCategories[productId] : "clothing";
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "completed" => "mud-theme-success",
            "processing" => "mud-theme-warning",
            "shipped" => "mud-theme-info",
            "cancelled" => "mud-theme-error",
            _ => "mud-theme-secondary"
        };
    }

    private string GetStatusText(string status)
    {
        return status switch
        {
            "Completed" => "✓ Completed",
            "Processing" => "⏳ Processing",
            "Shipped" => "🚚 Shipped",
            "Cancelled" => "❌ Cancelled",
            _ => status
        };
    }

    private void ViewOrderDetails(Order order)
    {
        Navigation.NavigateTo($"/order-details/{order.OrderId}");
    }

    private async Task CancelOrder(Order order)
    {
        try
        {
            var success = await orderService.CancelOrderAsync(order.OrderId);

            if (success)
            {
                inventoryService.RestoreInventoryOrder(order);
                Snackbar.Add($"Order #{order.OrderId} has been cancelled successfully.", Severity.Success);
                await LoadOrders();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to cancel order #{order.OrderId}. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling order: {ex.Message}");
            Snackbar.Add("An error occurred while cancelling the order.", Severity.Error);
        }
    }

    private void ContinueShopping()
    {
        Navigation.NavigateTo("/home");
    }

    private async Task RefreshOrders()
    {
        await LoadOrders();
    }

    public void Dispose()
    {
        userService.OnUserChanged -= OnUserChanged;
    }
}