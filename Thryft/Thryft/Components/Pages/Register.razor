@page "/"
@using System.ComponentModel.DataAnnotations
@using Thryft.Models
@using Thryft.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject UserService userService
@inject NavigationManager navigationManager
@inject AuthService authService
@rendermode InteractiveServer
@inject ProtectedLocalStorage _protectedLocalStorage;

<PageTitle>Register</PageTitle>

<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name"
                                  HelperText="Max. 8 characters"
                                  @bind-Value="model.Username"
                                  For="@(() => model.Username)" />

                    <MudTextField Label="Email"
                                  Class="mt-3"
                                  @bind-Value="model.Email"
                                  For="@(() => model.Email)" />

                    <MudTextField Label="Password"
                                  HelperText="Choose a strong password (8-30 characters)"
                                  Class="mt-3"
                                  @bind-Value="model.Password"
                                  For="@(() => model.Password)"
                                  InputType="InputType.Password" />

                    <MudTextField Label="Confirm Password"
                                  HelperText="Repeat the password"
                                  Class="mt-3"
                                  @bind-Value="model.Password2"
                                  For="@(() => model.Password2)"
                                  InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="ml-auto">
                        Register
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success - Form is valid!</MudText>
                }
                else
                {
                    <MudText Color="Color.Warning">Please fix validation errors</MudText>
                }

                @if (!string.IsNullOrEmpty(message))
                {
                    <MudText Color="Color.Info" Class="mt-2">@message</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private RegisterAccountForm model = new();
    private bool success;
    private string message = "";

    private async Task OnInitializedAsync()
    {
        try
        {
            await _protectedLocalStorage.DeleteAsync("currentUser");
        }
        catch (InvalidOperationException)
        {
            // Ignore during prerendering
        }
        navigationManager.NavigateTo("/", true);

    }

    private async Task HandleValidSubmit()
    {
        success = false;

        // Check if email already exists
        var exists = model.Email.ToLower().Trim();
        var existing = await userService.GetUserAsync(exists);
        if (existing != null)
        {
            message = "Email already exists";
            success = false;
            StateHasChanged();
            return;
        }

        // Create new user
        var user = new User
        {
            Name = model.Username,
            Email = model.Email.ToLower(),
            Password = model.Password
        };

        await userService.AddUserAsync(user);
        message = "Account created successfully!";

        // Navigate to login after a brief delay
        await Task.Delay(2000);
        navigationManager.NavigateTo("/login");
    }

    private void HandleInvalidSubmit()
    {
        success = false;
        message = "Please fix the validation errors above";
        StateHasChanged();
    }

    public class RegisterAccountForm
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Username is required")]
        [System.ComponentModel.DataAnnotations.StringLength(8, ErrorMessage = "Username must be at most 8 characters")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(30, MinimumLength = 8, ErrorMessage = "Password must be between 8 and 30 characters")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$",
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, and one number")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string Password2 { get; set; } = "";
    }
}